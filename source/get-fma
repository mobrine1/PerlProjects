#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/get-fma
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/get-fma
# Started On        - Fri 26 Apr 16:13:18 BST 2019
# Last Change       - Fri 19 Feb 01:23:06 GMT 2021
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Discovered to not be working at all, as of 2020-11-08.
#
# Dependencies:
#
#   liblist-moreutils-perl (>= 0.413-1build1)
#   libwww-perl (>= 6.15-1)
#   perl (>= 5.22.1-9)
#----------------------------------------------------------------------------------

require File::Temp;
require LWP::UserAgent;
require List::MoreUtils;

use 5.22.1;
use strict;
use warnings;
use autodie;
use File::Temp 'tempfile';
use LWP::UserAgent;
use List::MoreUtils 'uniq';

no warnings 'uninitialized';

my $CurVer = '2021-02-19';
my $Progrm = 'get-fma';

sub Usage {
	print(qq{Usage: $Progrm [OPTS] [GENRE] [PAGE]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -D, --dest PATH          - Files will be downloaded to PATH.
		  -n, --name [TYPE]        - Name TYPE to use for file names.
		  -O, --output-only        - Don't download; output only.

		  Valid TYPEs are 'generic', 'id', and 'title'.
	} =~ tr/\t//dr)
}

my $Destination = './';
my $NameFormat = 'title';
my $OutputOnly = 'false';
my $Domain = 'https://freemusicarchive.org';

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h|-\?)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] =~ '^(--name|-n)$') {
		shift();

		die("Invalid format specified")
			unless $ARGV[0] =~ '^(title|generic|id|link)$';

		$NameFormat = $ARGV[0]
	} elsif ($ARGV[0] =~ '^(--output-only|-O)$') {
		$OutputOnly = 'true'
	} elsif ($ARGV[0] =~ '^(--dest|-D)$') {
		shift();

		if (-d $ARGV[0]) {
			if ($ARGV[0] !~ '/$') {
				$Destination = $ARGV[0] . '/'
			}else{
				$Destination = $ARGV[0]
			}
		} else {
			die("Directory not found")
		}
	} elsif ($ARGV[0] =~ '^-') {
		die('Incorrect argument(s) specified')
	} else {
		last
	}

	shift()
}

unless (length($ARGV[0]) > 0 and length($ARGV[1]) > 0) {
	die('Both a genre and page number are required')
}

my @Genres = (qw{
	blues classical country electronic experimental folk hip-hop spoken
	instrumental international jazz novelty historic pop rock soul-rnb
});

my $UA = LWP::UserAgent->new(
	'max_redirect' => 1,
	'protocols_allowed' => ['https', 'https'],
	'agent' => 'Mozilla/5.0'
);

my $TempFile;
my $ValidGenre = "false";

foreach (@Genres) {
	next unless $_ eq $ARGV[0];

	my $Sort = 'sort=track_date_published&d=1&';
	my $Link = "$Domain/genre/$ARGV[0]/?${Sort}page=$ARGV[1]";

	my $FH = File::Temp->new(UNLINK => 0, SUFFIX => '.tmp');
	$TempFile = $FH->filename();
	print($FH $UA->get($Link)->decoded_content());

	$ValidGenre = 'true';
	close($FH);
	last
}

$ValidGenre eq 'false' and die('Genre not found');

-f $TempFile or die("File to find temporary file");
-r $TempFile or die("File to read temporary file");
open(my $FH, '<', $TempFile);

my ($Track, $Pad, $Title);
my $Count = 0;

while (<$FH>) {
	chomp();

	if ($NameFormat eq 'title') {
		if ($_ =~ /class="ptxt-track"/ and $_ !~ /class="sortarr-up"/) {
			my @TitleLine = split('/', $_);
			$Title = $TitleLine[6] =~ s/(.*">|<$|\s\([iI][dD]\s[0-9]{4}\))//gr
		}
	}

	$_ =~ "$Domain/music/download/" or next;

	my @Line = split(' ');
	my $Link = $Line[1] =~ s/(href=|\")//gr;

	if ($NameFormat eq 'id') {
		my $ID = $Link =~ s/^.*\///gr;
		$Track = $ID;
		print($Track)
	} elsif ($NameFormat eq 'title') {
		if(not $Title){
			next
		}else{
			$Track = "${Title}.mp3";
			print($Track)
		}
	} elsif ($NameFormat eq 'generic') {
		$Count++;
		$Count = "0$Count" if $Count < 10;
		$Track = "Track_#$Pad$Count.mp3";
		print($Track)
	}

	if ($OutputOnly eq 'true') {
		print("\n")
	} else {
		open(my $Audio, '>', "$Destination$Track");

		my $Buffer = $UA->get($Link);
		if ($Buffer->is_success()) {
			print($Audio $Buffer->decoded_content());
			print(" [OK]\n")
		} else {
			unlink("$Destination$Track");
			print(" [ERROR]\n")
		}

		close($Audio)
	}
}

close($FH);
unlink($TempFile)
